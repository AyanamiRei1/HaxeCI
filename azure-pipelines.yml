stages:
  - stage: Build
    jobs:

      # Neko, Python

      - job: Build
        pool:
          vmImage: 'ubuntu-latest'
        container: haxe:3.4.7
        steps:
          - script: |
              haxe build-neko.hxml
              haxe build-python.hxml
            displayName: 'Compile'
          - task: PublishPipelineArtifact@0
            inputs:
              artifactName: 'nekoOutput'
              targetPath: bin/HelloWorld.n
          - task: PublishPipelineArtifact@0
            inputs:
              artifactName: 'pythonOutput'
              targetPath: bin/HelloWorld.py

      # Cpp

      - job: BuildCppLinux
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              sudo add-apt-repository ppa:haxe/releases -y
              sudo apt update -y
              sudo apt install haxe -y
            displayName: 'Install Haxe'
          - script: |
              haxelib setup ~/haxelib
              haxelib install hxcpp > /dev/null
              haxelib list
            displayName: 'Install haxelibs'
          - script: haxe build-cpp.hxml
            displayName: 'Compile'
          - script: tar -czf bin.tar.gz bin
            displayName: 'Archive'
          - task: PublishPipelineArtifact@0
            inputs:
              artifactName: 'cppLinuxOutput'
              targetPath: bin.tar.gz

      - job: BuildCppMac
        pool:
          vmImage: 'macOS-10.14'
        steps:
          - script: |
              brew install haxe
            displayName: 'Install Haxe'
          - script: |
              haxelib setup ~/haxelib
              haxelib install hxcpp > /dev/null
              haxelib list
            displayName: 'Install haxelibs'
          - script: haxe build-cpp.hxml
            displayName: 'Compile'
          - script: tar -czf bin.tar.gz bin
            displayName: 'Archive'
          - task: PublishPipelineArtifact@0
            inputs:
              artifactName: 'cppMacOutput'
              targetPath: bin.tar.gz

      - job: BuildCppWindows
        pool:
          vmImage: 'windows-2019'
        steps:
          - script: |
              choco install haxe -y
              RefreshEnv
            displayName: 'Install Haxe'
          - script: |
              haxelib setup C:/haxelib
              haxelib install hxcpp > nul
              haxelib list
            displayName: 'Install haxelibs'
          - script: haxe build-cpp.hxml
            displayName: 'Compile'
          - task: PublishPipelineArtifact@0
            inputs:
              artifactName: 'cppWindowsOutput'
              targetPath: bin

  - stage: Test
    jobs:

      # Macro

      - job: TestMacro
        pool:
          vmImage: 'ubuntu-latest'
        container: haxe:3.4.7
        steps:
          - script: haxe build-interp.hxml
            displayName: 'Test'

      # Neko

      - job: TestNekoLinux
        pool:
          vmImage: 'ubuntu-latest'
        container: haxe:3.4.7
        steps:
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'nekoOutput'
              targetPath: bin
          - script: neko bin/HelloWorld.n
            displayName: 'Test'

      - job: TestNekoMac
        pool:
          vmImage: 'macOS-10.14'
        steps:
          - script: |
              brew install neko
            displayName: 'Install Neko'
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'nekoOutput'
              targetPath: bin
          - script: neko bin/HelloWorld.n
            displayName: 'Test'

      - job: TestNekoWindows
        pool:
          vmImage: 'windows-2019'
        steps:
          - script: |
              choco install neko -y
              RefreshEnv
            displayName: 'Install Neko'
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'nekoOutput'
              targetPath: bin
          - script: neko bin/HelloWorld.n
            displayName: 'Test'

      # Python

      - job: TestPythonLinux
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          matrix:
            python36:
              container: python:3.6
            python37:
              container: python:3.7
        container: $[ variables['container'] ]
        steps:
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'pythonOutput'
              targetPath: bin
          - script: |
              python3 -V
              python3 bin/HelloWorld.py
            displayName: 'Test'

      - job: TestPythonMac
        pool:
          vmImage: 'macOS-10.14'
        steps:
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'pythonOutput'
              targetPath: bin
          - script: |
              python3 -V
              python3 bin/HelloWorld.py
            displayName: 'Test'

      - job: TestPythonWindows
        pool:
          vmImage: 'windows-2019'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.7'
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'pythonOutput'
              targetPath: bin
          - script: |
              python -V
              python bin/HelloWorld.py
            displayName: 'Test'

      # Cpp

      - job: TestCppLinux
        pool:
          vmImage: 'ubuntu-latest'
        container: debian:latest
        steps:
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'cppLinuxOutput'
              targetPath: bin
          - script: tar -xzf bin/bin.tar.gz && rm bin/bin.tar.gz
            displayName: 'Extract'
          - script: ./bin/HelloWorld
            displayName: 'Test'

      - job: TestCppMac
        pool:
          vmImage: 'macOS-10.14'
        steps:
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'cppMacOutput'
              targetPath: bin
          - script: tar -xzf bin/bin.tar.gz && rm bin/bin.tar.gz
            displayName: 'Extract'
          - script: ./bin/HelloWorld
            displayName: 'Test'

      - job: TestCppWindows
        pool:
          vmImage: 'windows-2019'
        steps:
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'cppWindowsOutput'
              targetPath: bin
          - script: bin/HelloWorld.exe
            displayName: 'Test'
