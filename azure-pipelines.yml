jobs:

  # Macro

  - job: TestMacro
    pool:
      vmImage: 'ubuntu-16.04'
    container: haxe:3.4.7
    steps:
      - script: haxe build-interp.hxml
        displayName: 'Test'

  # Neko

  - job: BuildNeko
    pool:
      vmImage: 'ubuntu-16.04'
    container: haxe:3.4.7
    steps:
      - script: haxe build-neko.hxml
        displayName: 'Compile'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'nekoOutput'
          targetPath: bin/HelloWorld.n

  - job: TestNekoLinux
    dependsOn: BuildNeko
    pool:
      vmImage: 'ubuntu-16.04'
    container: haxe:3.4.7
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'nekoOutput'
          targetPath: bin
      - script: neko bin/HelloWorld.n
        displayName: 'Test'

  - job: TestNekoMac
    dependsOn: BuildNeko
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: none
      - script: brew install neko
        displayName: 'Install Neko'
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'nekoOutput'
          targetPath: bin
      - script: neko bin/HelloWorld.n
        displayName: 'Test'

  - job: TestNekoWindows
    dependsOn: BuildNeko
    pool:
      vmImage: 'windows-2019'
    steps:
      - checkout: none
      - powershell: |
          choco install --no-progress neko -y
          $nekoPath = (Get-ChildItem C:/ProgramData/chocolatey/lib/neko/*/neko.dll -Recurse).Directory
          echo "##vso[task.setvariable variable=NEKOPATH]$nekoPath"
        displayName: 'Install Neko'
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'nekoOutput'
          targetPath: bin
      - script: neko bin/HelloWorld.n
        displayName: 'Test'

  # JS

  - job: BuildJS
    pool:
      vmImage: 'ubuntu-16.04'
    container: haxe:3.4.7
    steps:
      - script: haxe build-js.hxml
        displayName: 'Compile'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'jsOutput'
          targetPath: bin/HelloWorld.js

  - job: TestJSLinux
    dependsOn: BuildJS
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        node10:
          container: node:10
        node8:
          container: node:8
    container: $[ variables['container'] ]
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'jsOutput'
          targetPath: bin
      - script: |
          node --version
          node bin/HelloWorld.js
        displayName: 'Test'

  - job: TestJSMac
    dependsOn: BuildJS
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'jsOutput'
          targetPath: bin
      - script: |
          node --version
          node bin/HelloWorld.js
        displayName: 'Test'

  - job: TestJSWindows
    dependsOn: BuildJS
    pool:
      vmImage: 'windows-2019'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'jsOutput'
          targetPath: bin
      - script: |
          node --version
          node bin/HelloWorld.js
        displayName: 'Test'

  # Java

  - job: BuildJava
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: |
          sudo add-apt-repository ppa:haxe/releases -y
          sudo apt update -y
          sudo apt install haxe -y
        displayName: 'Install Haxe'
      - script: |
          haxelib setup ~/haxelib
          haxelib install hxjava > /dev/null
          haxelib list
        displayName: 'Install haxelibs'
      - script: haxe build-java.hxml
        displayName: 'Compile'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'javaOutput'
          targetPath: bin

  - job: TestJavaLinux
    dependsOn: BuildJava
    pool:
      vmImage: 'ubuntu-16.04'
    container: openjdk:8-jre
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'javaOutput'
          targetPath: bin
      - script: |
          java -version
          java -jar bin/HelloWorld.jar
        displayName: 'Test'

  - job: TestJavaMac
    dependsOn: BuildJava
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'javaOutput'
          targetPath: bin
      - script: |
          java -version
          java -jar bin/HelloWorld.jar
        displayName: 'Test'

  - job: TestJavaWindows
    dependsOn: BuildJava
    pool:
      vmImage: 'windows-2019'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'javaOutput'
          targetPath: bin
      - script: |
          java -version 2>&1
          java -jar bin/HelloWorld.jar
        displayName: 'Test'

  # CSharp

  - job: BuildCSharp
    pool:
      vmImage: 'windows-2019'
    steps:
      - powershell: |
          choco install --no-progress haxe -y
          $nekoPath = (Get-ChildItem C:/ProgramData/chocolatey/lib/neko/*/neko.dll -Recurse).Directory
          echo "##vso[task.setvariable variable=NEKOPATH]$nekoPath"
        displayName: 'Install Haxe'
      - script: |
          haxelib setup C:/haxelib
          haxelib install hxcs > nul
          haxelib list
        displayName: 'Install haxelibs'
      - script: haxe build-cs.hxml
        displayName: 'Compile'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'csharpOutput'
          targetPath: bin

  - job: TestCSharpLinux
    dependsOn: BuildCSharp
    pool:
      vmImage: 'ubuntu-16.04'
    container: mono:latest
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'csharpOutput'
          targetPath: bin
      - script: |
          mono --version
          mono bin/bin/HelloWorld.exe
        displayName: 'Test'

  - job: TestCSharpMac
    dependsOn: BuildCSharp
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'csharpOutput'
          targetPath: bin
      - script: |
          mono --version
          mono bin/bin/HelloWorld.exe
        displayName: 'Test'

  - job: TestCSharpWindows
    dependsOn: BuildCSharp
    pool:
      vmImage: 'windows-2019'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'csharpOutput'
          targetPath: bin
      - script: bin\bin\HelloWorld.exe
        displayName: 'Test'

  # Python

  - job: BuildPython
    pool:
      vmImage: 'ubuntu-16.04'
    container: haxe:3.4.7
    steps:
      - script: haxe build-python.hxml
        displayName: 'Compile'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'pythonOutput'
          targetPath: bin/HelloWorld.py

  - job: TestPythonLinux
    dependsOn: BuildPython
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        python37:
          container: python:3.7
        python36:
          container: python:3.6
    container: $[ variables['container'] ]
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'pythonOutput'
          targetPath: bin
      - script: |
          python3 -V
          python3 bin/HelloWorld.py
        displayName: 'Test'

  - job: TestPythonMac
    dependsOn: BuildPython
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'pythonOutput'
          targetPath: bin
      - script: |
          python3 -V
          python3 bin/HelloWorld.py
        displayName: 'Test'

  - job: TestPythonWindows
    dependsOn: BuildPython
    pool:
      vmImage: 'windows-2019'
    steps:
      - checkout: none
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'pythonOutput'
          targetPath: bin
      - script: |
          python -V
          python bin/HelloWorld.py
        displayName: 'Test'

  # PHP

  - job: BuildPHP
    pool:
      vmImage: 'ubuntu-16.04'
    container: haxe:3.4.7
    steps:
      - script: haxe build-php.hxml
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'phpOutput'
          targetPath: bin

  - job: TestPHPLinux
    dependsOn: BuildPHP
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        php73:
          container: php:7.3
        php72:
          container: php:7.2
    container: $[ variables['container'] ]
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'phpOutput'
          targetPath: bin
      - script: |
          php --version
          php bin/index.php
        displayName: 'Test'

  - job: TestPHPMac
    dependsOn: BuildPHP
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'phpOutput'
          targetPath: bin
      - script: |
          php --version
          php bin/index.php
        displayName: 'Test'

  - job: TestPHPWindows
    dependsOn: BuildPHP
    pool:
      vmImage: 'windows-2019'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'phpOutput'
          targetPath: bin
      - script: |
          php --version
          php bin/index.php
        displayName: 'Test'

  # Cpp

  - job: BuildCppLinux
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: |
          sudo add-apt-repository ppa:haxe/releases -y
          sudo apt update -y
          sudo apt install haxe -y
        displayName: 'Install Haxe'
      - script: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null
          haxelib list
        displayName: 'Install haxelibs'
      - script: haxe build-cpp.hxml
        displayName: 'Compile'
      - script: tar -czf bin.tar.gz bin
        displayName: 'Archive'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'cppLinuxOutput'
          targetPath: bin.tar.gz

  - job: BuildCppMac
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - script: brew install haxe
        displayName: 'Install Haxe'
      - script: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null
          haxelib list
        displayName: 'Install haxelibs'
      - script: haxe build-cpp.hxml
        displayName: 'Compile'
      - script: tar -czf bin.tar.gz bin
        displayName: 'Archive'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'cppMacOutput'
          targetPath: bin.tar.gz

  - job: BuildCppWindows
    pool:
      vmImage: 'windows-2019'
    steps:
      - powershell: |
          choco install --no-progress haxe -y
          $nekoPath = (Get-ChildItem C:/ProgramData/chocolatey/lib/neko/*/neko.dll -Recurse).Directory
          echo "##vso[task.setvariable variable=NEKOPATH]$nekoPath"
        displayName: 'Install Haxe'
      - script: |
          haxelib setup C:/haxelib
          haxelib install hxcpp > nul
          haxelib list
        displayName: 'Install haxelibs'
      - script: haxe build-cpp.hxml
        displayName: 'Compile'
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'cppWindowsOutput'
          targetPath: bin

  - job: TestCppLinux
    dependsOn: BuildCppLinux
    pool:
      vmImage: 'ubuntu-16.04'
    container: debian:latest
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'cppLinuxOutput'
          targetPath: bin
      - script: tar -xzf bin/bin.tar.gz && rm bin/bin.tar.gz
        displayName: 'Extract'
      - script: ./bin/HelloWorld
        displayName: 'Test'

  - job: TestCppMac
    dependsOn: BuildCppMac
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'cppMacOutput'
          targetPath: bin
      - script: tar -xzf bin/bin.tar.gz && rm bin/bin.tar.gz
        displayName: 'Extract'
      - script: ./bin/HelloWorld
        displayName: 'Test'

  - job: TestCppWindows
    dependsOn: BuildCppWindows
    pool:
      vmImage: 'windows-2019'
    steps:
      - checkout: none
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'cppWindowsOutput'
          targetPath: bin
      - script: bin\HelloWorld.exe
        displayName: 'Test'

  # Lua

  - job: BuildLua
    pool:
      vmImage: 'ubuntu-16.04'
    container: haxe:3.4.7
    steps:
      - script: haxe build-lua.hxml
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'luaOutput'
          targetPath: bin/HelloWorld.lua

  - job: TestLuaLinux
    dependsOn: BuildLua
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - checkout: none
      - script: |
          set -ex
          sudo apt update -y
          sudo apt install -y lua5.1 luarocks libpcre3-dev libssl-dev
          sudo luarocks install luasec OPENSSL_LIBDIR=/usr/lib/x86_64-linux-gnu
          sudo luarocks install lrexlib-pcre PCRE_LIBDIR=/usr/lib/x86_64-linux-gnu
          sudo luarocks install luabitop
          sudo luarocks install luv
          sudo luarocks install environ
          sudo luarocks install luautf8
        displayName: 'Install Lua and LuaRocks'
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'luaOutput'
          targetPath: bin
      - script: |
          lua -v
          lua bin/HelloWorld.lua
        displayName: 'Test'

  - job: TestLuaMac
    dependsOn: BuildLua
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - checkout: none
      - script: |
          set -ex
          brew update
          brew install lua pcre
          brew install luarocks --HEAD # https://github.com/luarocks/luarocks/issues/1044
          sudo luarocks install lrexlib-pcre
          sudo luarocks install luasocket
          sudo luarocks install luv
          sudo luarocks install environ
          sudo luarocks install luautf8
        displayName: 'Install Lua and LuaRocks'
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'luaOutput'
          targetPath: bin
      - script: |
          lua -v
          lua bin/HelloWorld.lua
        displayName: 'Test'

  - job: TestLuaWindows
    dependsOn: BuildLua
    pool:
      vmImage: 'windows-2019'
    steps:
      - checkout: none
      - script: |
          pip install hererocks
          hererocks luaenv --lua 5.3 -rlatest
        displayName: 'Install Lua'
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'luaOutput'
          targetPath: bin
      - script: |
          call luaenv\bin\activate
          lua -v
          lua bin/HelloWorld.lua
        displayName: 'Test'

  # Flash

  - job: BuildFlash
    pool:
      vmImage: 'ubuntu-16.04'
    container: haxe:3.4.7
    steps:
      - script: haxe build-flash.hxml -D fdb
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'flashOutput'
          targetPath: bin/HelloWorld.swf

  # Flash

  - job: TestFlashLinux
    dependsOn: BuildFlash
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - script: |
          sudo add-apt-repository ppa:haxe/releases -y
          sudo apt update -y
          sudo apt install haxe -y
        displayName: 'Install Haxe'
      - script: haxe flash/install.hxml
        displayName: 'Install Flash Player Debugger'
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'flashOutput'
          targetPath: bin
      - script: haxe flash/run.hxml bin/HelloWorld.swf
        displayName: 'Test'

  - job: TestFlashMac
    dependsOn: BuildFlash
    pool:
      vmImage: 'macOS-10.14'
    steps:
      - script: brew install haxe
        displayName: 'Install Haxe'
      - script: haxe flash/install.hxml
        displayName: 'Install Flash Player Debugger'
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'flashOutput'
          targetPath: bin
      - script: haxe flash/run.hxml bin/HelloWorld.swf
        displayName: 'Test'

  - job: TestFlashWindows
    dependsOn: BuildFlash
    pool:
      vmImage: 'windows-2019'
    steps:
      - powershell:
          choco install --no-progress haxe -y
          $nekoPath = (Get-ChildItem C:/ProgramData/chocolatey/lib/neko/*/neko.dll -Recurse).Directory
          echo "##vso[task.setvariable variable=NEKOPATH]$nekoPath"
        displayName: 'Install Haxe'
      - script: haxe flash/install.hxml
        displayName: 'Install Flash Player Debugger'
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'flashOutput'
          targetPath: bin
      - script: haxe flash/run.hxml bin/HelloWorld.swf
        displayName: 'Test'
